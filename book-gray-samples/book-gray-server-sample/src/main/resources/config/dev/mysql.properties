
spring.datasource.url=jdbc:mysql://dtw-mysql-test.bookapi.cn:3306/book_gray?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=Dydtw_adm@2018
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#Druid连接池配置，应用到上面所有数据源中
#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
spring.datasource.filters=stat,wall,log4j
#最大连接池数量
spring.datasource.maxActive=255
#最小连接池数量
spring.datasource.minIdle=3
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.initialSize=50
#获取连接时最大等待时间，单位毫秒
spring.datasource.maxWait=30000
#超过时间限制是否回收
spring.datasource.removeAbandoned=true
#超过时间限制多长
spring.datasource.removeAbandonedTimeout=18000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=25200000
#用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.validationQuery=SELECT 1
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
#spring.datasource.maxOpenPreparedStatements = 20
## 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000